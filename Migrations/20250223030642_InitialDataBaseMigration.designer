﻿// <auto-generated />
using System;
using System.Reflection.Emit;
using Assignment02.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment02.Migrations
{
    [DbContext(typeof(ITIDbContext))]
    [Migration("20250223030642_InitialDataBaseMigration")]
    partial class InitialDataBaseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment02.Models.Course", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("Duration")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("Top_ID")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("Top_ID");

                b.ToTable("Course");
            });

            modelBuilder.Entity("Assignment02.Models.CourseInst", b =>
            {
                b.Property<int>("Inst_ID")
                    .HasColumnType("int");

                b.Property<int>("Course_ID")
                    .HasColumnType("int");

                b.Property<int>("CourseId")
                    .HasColumnType("int");

                b.Property<string>("Evaluate")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("InstructorId")
                    .HasColumnType("int");

                b.HasKey("Inst_ID", "Course_ID");

                b.HasIndex("CourseId");

                b.HasIndex("InstructorId");

                b.ToTable("CourseInstructors");
            });

            modelBuilder.Entity("Assignment02.Models.Department", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("HiringDate")
                    .HasColumnType("datetime2");

                b.Property<int>("Ins_ID")
                    .HasColumnType("int");

                b.Property<int>("InstructorId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("InstructorId");

                b.ToTable("Department");
            });

            modelBuilder.Entity("Assignment02.Models.Instructor", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Address")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("Dept_ID")
                    .HasColumnType("int");

                b.Property<decimal>("HourRate")
                    .HasColumnType("decimal(18,2)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<decimal>("Salary")
                    .HasColumnType("decimal(18,2)");

                b.HasKey("Id");

                b.HasIndex("Dept_ID");

                b.ToTable("Instructor");
            });

            modelBuilder.Entity("Assignment02.Models.StudCourse", b =>
            {
                b.Property<int>("Stud_ID")
                    .HasColumnType("int");

                b.Property<int>("Course_ID")
                    .HasColumnType("int");

                b.Property<int>("CourseId")
                    .HasColumnType("int");

                b.Property<decimal>("Grade")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("StudentID")
                    .HasColumnType("int");

                b.HasKey("Stud_ID", "Course_ID");

                b.HasIndex("CourseId");

                b.HasIndex("StudentID");

                b.ToTable("StudCourses");
            });

            modelBuilder.Entity("Assignment02.Models.Student", b =>
            {
                b.Property<int>("ID")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                b.Property<string>("Address")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.Property<int>("Age")
                    .HasColumnType("int");

                b.Property<int>("Dep_Id")
                    .HasColumnType("int");

                b.Property<string>("FName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar")
                    .HasColumnName("StudentFirstName");

                b.Property<string>("LName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar")
                    .HasColumnName("StudentLastName");

                b.HasKey("ID");

                b.HasIndex("Dep_Id");

                b.ToTable("Student");
            });

            modelBuilder.Entity("Assignment02.Models.Topic", b =>
            {
                b.Property<int>("ID")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("ID");

                b.ToTable("Topics");
            });

            modelBuilder.Entity("Assignment02.Models.Course", b =>
            {
                b.HasOne("Assignment02.Models.Topic", "Topics")
                    .WithMany("Courses")
                    .HasForeignKey("Top_ID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Topics");
            });

            modelBuilder.Entity("Assignment02.Models.CourseInst", b =>
            {
                b.HasOne("Assignment02.Models.Course", "Course")
                    .WithMany("InstructorCourses")
                    .HasForeignKey("CourseId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Assignment02.Models.Instructor", "Instructor")
                    .WithMany("InstructorCourses")
                    .HasForeignKey("InstructorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Course");

                b.Navigation("Instructor");
            });

            modelBuilder.Entity("Assignment02.Models.Department", b =>
            {
                b.HasOne("Assignment02.Models.Instructor", "Instructor")
                    .WithMany()
                    .HasForeignKey("InstructorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Instructor");
            });

            modelBuilder.Entity("Assignment02.Models.Instructor", b =>
            {
                b.HasOne("Assignment02.Models.Department", "Departments")
                    .WithMany("Instructors")
                    .HasForeignKey("Dept_ID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Departments");
            });

            modelBuilder.Entity("Assignment02.Models.StudCourse", b =>
            {
                b.HasOne("Assignment02.Models.Course", "Course")
                    .WithMany("StudentCourses")
                    .HasForeignKey("CourseId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Assignment02.Models.Student", "Student")
                    .WithMany("StudentCourses")
                    .HasForeignKey("StudentID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Course");

                b.Navigation("Student");
            });

            modelBuilder.Entity("Assignment02.Models.Student", b =>
            {
                b.HasOne("Assignment02.Models.Department", "Department")
                    .WithMany("Students")
                    .HasForeignKey("Dep_Id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Department");
            });

            modelBuilder.Entity("Assignment02.Models.Course", b =>
            {
                b.Navigation("InstructorCourses");

                b.Navigation("StudentCourses");
            });

            modelBuilder.Entity("Assignment02.Models.Department", b =>
            {
                b.Navigation("Instructors");

                b.Navigation("Students");
            });

            modelBuilder.Entity("Assignment02.Models.Instructor", b =>
            {
                b.Navigation("InstructorCourses");
            });

            modelBuilder.Entity("Assignment02.Models.Student", b =>
            {
                b.Navigation("StudentCourses");
            });

            modelBuilder.Entity("Assignment02.Models.Topic", b =>
            {
                b.Navigation("Courses");
            });
#pragma warning restore 612, 618
        }
    }
}